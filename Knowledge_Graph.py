{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOP6KNymOxMhXONdgsCpDtm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3HQdlxoaR9I8"
      },
      "outputs": [],
      "source": [
        "#install packages\n",
        "pip install nltk\n",
        "pip install gensim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BnBG4kmlFqQI"
      },
      "outputs": [],
      "source": [
        "#import packages\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import h5py\n",
        "import gensim\n",
        "from gensim.models import Word2Vec\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "from nltk.tokenize import sent_tokenize, word_tokenize\n",
        "import warnings\n",
        "from collections import defaultdict  # For word frequency\n",
        "import spacy  # For preprocessing\n",
        "from Function import tanh_normalize,cosine_similarity\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import MinMaxScaler"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "extract=pd.read_excel(\"*path/DATA/extract.xlsx\")\n",
        "druginfo=pd.read_csv(\"*path/DATA/drugsinfo.csv\")\n",
        "cellline_LINCS_EXP=pd.read_csv('*path/DATA/cellline_LINCS_EXP.csv')\n",
        "cellline_CCLE_EXP=pd.read_csv('*path/DATA/cellline_CCLE_EXP.csv').set_index('cell_line_name')\n",
        "PPI_drug=pd.read_csv('*path/DATA/PPI.csv')\n",
        "topgenesforcelllines=pd.read_csv('*path/DATA/topgenesforcelllines.csv')\n",
        "PPI_cellline=pd.read_csv('*path/DATA/PPICELLLINE.csv')\n",
        "df=pd.read_csv('*path/DATA/df.csv').set_index(['drug_row','drug_col','cell_line_name']) #df includes GP features of drug_A and drug_B and gene expression of cell line from LINCS"
      ],
      "metadata": {
        "id": "kT9TbhnaV9hL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IekwwBeQgkfu"
      },
      "outputs": [],
      "source": [
        "GP_a=np.asarray(df.iloc[:,0:978])\n",
        "GP_b=np.asarray(df.iloc[:,978:1956])\n",
        "GEXP_cellline=np.asarray(df.iloc[:,1956:2934])\n",
        "# get the corr between corresponding rows\n",
        "corr_array = []\n",
        "for i in range(GP_a.shape[0]):\n",
        "    row1 = GP_a[i]\n",
        "    row2 = GP_b[i]\n",
        "    corr = np.corrcoef(row1, row2)[0,1]\n",
        "    corr_array.append(corr)\n",
        "# get the distance between corresponding rows\n",
        "euclidean_array = []\n",
        "for i in range(GP_a.shape[0]):\n",
        "    row1 = GP_a[i]\n",
        "    row2 = GP_b[i]\n",
        "    corr = np.corrcoef(row1, row2)[0,1]\n",
        "    euclidean_dist = np.sqrt(2*(1-corr))\n",
        "    euclidean_array.append(euclidean_dist)\n",
        "# get the corr between GP_a and GEXP\n",
        "corrdrug1cell = []\n",
        "for i in range(d1.shape[0]):\n",
        "    row1 = np.apply_along_axis(tanh_normalize, axis=0, arr=GP_a[i])\n",
        "    row3 = np.apply_along_axis(tanh_normalize, axis=0, arr=GEXP[i])\n",
        "    corr = np.corrcoef(row1, row3)[0, 1]\n",
        "    corrdrug1cell.append(corr)\n",
        "# Compare the values in the two columns elementwise\n",
        "result = np.array(corrdrug1cell) < 0\n",
        "coldrug1cell = np.where(result, 1, 0)    # Create a new column with the results\n",
        "# get the corr between GP_b and GEXP\n",
        "corrdrug2cell = []\n",
        "for i in range(d1.shape[0]):\n",
        "    row1 = np.apply_along_axis(tanh_normalize, axis=0, arr=GP_b[i])\n",
        "    row3 = np.apply_along_axis(tanh_normalize, axis=0, arr=GEXP[i])\n",
        "    corr = np.corrcoef(row1, row3)[0, 1]\n",
        "    corrdrug1cell.append(corr)\n",
        "# Compare the values in the two columns elementwise\n",
        "result = np.array(corrdrug2cell) < 0\n",
        "coldrug2cell = np.where(result, 1, 0) # Create a new column with the results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0T-1aX7Jtr1C"
      },
      "outputs": [],
      "source": [
        "#add corr and dis and corrdrug1cell and corrdrug1cell columns on df\n",
        "df['corr']=corr_array\n",
        "df['dis']=euclidean_array\n",
        "df['corrdrug1cell']=coldrug1cell\n",
        "df['corrdrug2cell']=coldrug2cell"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#get cosine similarity on cellline_CCLE_EXP\n",
        "scaler = StandardScaler()\n",
        "cellline_CCLE_EXP_normalized = pd.DataFrame(scaler.fit_transform(cellline_CCLE_EXP.T).T, index=cellline_CCLE_EXP.index, columns=cellline_CCLE_EXP.columns)\n",
        "# Calculate cosine similarity\n",
        "cos_sim_matrix = cosine_similarity(cellline_CCLE_EXP_normalized.values)\n",
        "# Convert the result to a DataFrame for better readability\n",
        "cos_sim_cellline_CCLE_EXP = pd.DataFrame(cos_sim_matrix, index=cellline_CCLE_EXP.index, columns=cellline_CCLE_EXP.index)"
      ],
      "metadata": {
        "id": "VbobbBom9HdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#create similar sentences on cellline_CCLE_EXP\n",
        "sentences_similar = []\n",
        "for i in rang(len(cellline_CCLE_EXP.index)):\n",
        "    for j in range(i+1, len(llline_CCLE_EXP.index)):\n",
        "        if 0.7<= cos_sim_c.iloc[i, j]<1  :\n",
        "            sentence = f\"{cos_sim_cellline_CCLE_EXP.columns[i]} similar {cos_sim_cellline_CCLE_EXP.columns[j]}.\"\n",
        "            sentences_similar.append(sentence)\n",
        "#create dissimilar sentences on cellline_CCLE_EXP\n",
        "sentences_dissimilar = []\n",
        "for i in range(len(llline_CCLE_EXP.index)):\n",
        "    for j in range(i+1, len(llline_CCLE_EXP.index)):\n",
        "        if cos_sim_cellline_CCLE_EXP.iloc[i, j] <.7 :\n",
        "            sentence = f\"{cos_sim_cellline_CCLE_EXP.columns[i]} dissimilar {cos_sim_cellline_CCLE_EXP.columns[j]}.\"\n",
        "            sentences_dissimilar.append(sentence)\n"
      ],
      "metadata": {
        "id": "74BxIRer9mpH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#create sentences based on the relation between cellline_LINCS_EXP\n",
        "correlation_matrix = cellline_LINCS_EXP.corr()\n",
        "sentences_positivecorrelated = []\n",
        "for i in range(len(cellline_LINCS_EXP.columns)):\n",
        "    for j in range(i+1, len(cellline_LINCS_EXP.columns)):\n",
        "        if correlation_matrix.iloc[i, j] >=0.5 :\n",
        "            sentence = f\"{cellline_LINCS_EXP.columns[i]} positivecorrelated {cellline_LINCS_EXP.columns[j]}.\"\n",
        "            sentences_positivecorrelated .append(sentence)\n",
        "sentences_negativecorrelated = []\n",
        "for i in range(len(cellline_LINCS_EXP.columns)):\n",
        "    for j in range(i+1, len(cellline_LINCS_EXP.columns)):\n",
        "        if correlation_matrix.iloc[i, j]<-0.1 :\n",
        "            sentence = f\"{cellline_LINCS_EXP.columns[i]} negativecorrelated {cellline_LINCS_EXP.columns[j]}.\"\n",
        "            sentences_negativecorrelated .append(sentence)\n",
        "sentences_uncorrelated = []\n",
        "for i in range(len(cellline_LINCS_EXP.columns)):\n",
        "    for j in range(i+1, len(cellline_LINCS_EXP.columns)):\n",
        "        if -0.1<correlation_matrix.iloc[i, j]<0.1 :\n",
        "            sentence = f\"{cellline_LINCS_EXP.columns[i]} uncorrelated {cellline_LINCS_EXP.columns[j]}.\"\n",
        "            sentences_uncorrelated .append(sentence)\n"
      ],
      "metadata": {
        "id": "D2_Ci0V6HPYs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LHemstUoGC56"
      },
      "outputs": [],
      "source": [
        "#create sentences based on the relation between drug response and cellline_LINCS_EXP\n",
        "drug1cell=pd.DataFrame(df['corrdrug1cell'])\n",
        "drug1cell=drug1cell.reset_index().drop_duplicates(subset=['drug_row','cell_line_name']).drop(columns=['drug_col'])\n",
        "drug1cell=drug1cell.rename(columns={'drug_row':'drug','corrdrug1cell':'corr'})\n",
        "drug2cell=pd.DataFrame(df['corrdrug2cell'])\n",
        "drug2cell=drug2cell.reset_index().drop_duplicates(subset=['drug_col','cell_line_name']).drop(columns=['drug_row'])\n",
        "drug2cell=drug2cell.rename(columns={'drug_col':'drug','corrdrug2cell':'corr'})\n",
        "drugcell=pd.concat([drug1cell,drug2cell],axis=0)\n",
        "drugcell=drugcell.drop_duplicates(subset=['drug','cell_line_name'])\n",
        "drugcell['r']='ineffective'\n",
        "drugcell.loc[drugcell['corr']==1,'r']='effective'\n",
        "drugcell=drugcell.drop(columns=['corr'])\n",
        "drugcell=drugcell.reset_index()\n",
        "sentences_drugcell = []\n",
        "for _, row in drugcell.iterrows():\n",
        "    drug = row['drug']\n",
        "    cell = row['cell_line_name']\n",
        "    r=row['r']\n",
        "    sentence = f'{drug} {r} {cell}.'\n",
        "    sentences_drugcell.append(sentence)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qEW5MR0rpwdr"
      },
      "outputs": [],
      "source": [
        "#add drug targets and drug biomarkers\n",
        "fu=pd.read_csv('*path/DATA/Drugs/5-FU.csv')\n",
        "sentencesfu = []\n",
        "for _, row in fu.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentencefu = f'{gene} {target} 5-FU.'\n",
        "    sentencesfu.append(sentencefu)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ABT=pd.read_csv('*path/DATA/Drugs/ABT-888.csv')\n",
        "sentencesABT = []\n",
        "for _, row in ABT.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceABT = f'{gene} {target} ABT-888.'\n",
        "    sentencesABT.append(sentenceABT)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ALLOPURINOL=pd.read_csv('*path/DATA/Drugs/ALLOPURINOL.csv')\n",
        "sentencesALLOPURINOL = []\n",
        "for _, row in ALLOPURINOL.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceALLOPURINOL = f'{gene} {target} ALLOPURINOL.'\n",
        "    sentencesALLOPURINOL.append(sentenceALLOPURINOL)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "AMIFOSTINE=pd.read_csv('*path/DATA/Drugs/AMIFOSTINE.csv')\n",
        "sentencesAMIFOSTINE = []\n",
        "for _, row in AMIFOSTINE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceAMIFOSTINE = f'{gene} {target} AMIFOSTINE.'\n",
        "    sentencesAMIFOSTINE.append(sentenceAMIFOSTINE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ANASTROZOLE=pd.read_csv('*path/DATA/Drugs/ANASTROZOLE.csv')\n",
        "sentencesANASTROZOLE = []\n",
        "for _, row in ANASTROZOLE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceANASTROZOLE = f'{gene} {target} ANASTROZOLE.'\n",
        "    sentencesANASTROZOLE.append(sentenceANASTROZOLE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "AXITINIB=pd.read_csv('*path/DATA/Drugs/AXITINIB.csv')\n",
        "sentencesAXITINIB = []\n",
        "for _, row in AXITINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceAXITINIB = f'{gene} {target} AXITINIB.'\n",
        "    sentencesAXITINIB.append(sentenceAXITINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "AZD1775=pd.read_csv('*path/DATA/Drugs/AZD1775.csv')\n",
        "sentencesAZD1775 = []\n",
        "for _, row in AZD1775.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceAZD1775 = f'{gene} {target} AZD1775.'\n",
        "    sentencesAZD1775.append(sentenceAZD1775)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "BEZ=pd.read_csv('*path/DATA/Drugs/BEZ-235.csv')\n",
        "sentencesBEZ = []\n",
        "for _, row in BEZ.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceBEZ = f'{gene} {target} BEZ-235.'\n",
        "    sentencesBEZ.append(sentenceBEZ)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "BORTEZOMIB=pd.read_csv('*path/DATA/Drugs/BORTEZOMIB.csv')\n",
        "sentencesBORTEZOMIB = []\n",
        "for _, row in BORTEZOMIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceBORTEZOMIB = f'{gene} {target} BORTEZOMIB.'\n",
        "    sentencesBORTEZOMIB.append(sentenceBORTEZOMIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "BUSULFAN=pd.read_csv('*path/DATA/Drugs/BUSULFAN.csv')\n",
        "sentencesBUSULFAN = []\n",
        "for _, row in BUSULFAN.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceBUSULFAN = f'{gene} {target} ABUSULFAN.'\n",
        "    sentencesBUSULFAN.append(sentenceBUSULFAN)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "CELECOXIB=pd.read_csv('*path/DATA/Drugs/CELECOXIB.csv')\n",
        "sentencesCELECOXIB = []\n",
        "for _, row in CELECOXIB.iterrows():\n",
        "    drug = row['drug']\n",
        "    target = row['target']\n",
        "    sentenceCELECOXIB = f'{target} target CELECOXIB.'\n",
        "    sentencesCELECOXIB.append(sentenceCELECOXIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "CHEMBL277800=pd.read_csv('*path/DATA/Drugs/CHEMBL277800.csv')\n",
        "sentencesCHEMBL277800 = []\n",
        "for _, row in CHEMBL277800.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceCHEMBL277800 = f'{gene} {target} CHEMBL277800.'\n",
        "    sentencesCHEMBL277800.append(sentenceCHEMBL277800)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "CHLORAMBUCIL=pd.read_csv('*path/DATA/Drugs/CHLORAMBUCIL.csv')\n",
        "sentencesCHLORAMBUCIL = []\n",
        "for _, row in CHLORAMBUCIL.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceCHLORAMBUCIL = f'{gene} {target} CHLORAMBUCIL.'\n",
        "    sentencesCHLORAMBUCIL.append(sentenceCHLORAMBUCIL)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "CRIZOTINIB=pd.read_csv('*path/DATA/Drugs/CRIZOTINIB.csv')\n",
        "sentencesCRIZOTINIB = []\n",
        "for _, row in CRIZOTINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceCRIZOTINIB = f'{gene} {target} CRIZOTINIB.'\n",
        "    sentencesCRIZOTINIB.append(sentenceCRIZOTINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "DASATINIB=pd.read_csv('*path/DATA/Drugs/dasatanib.csv')\n",
        "sentencesDASATINIB = []\n",
        "for _, row in DASATINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceDASATINIB = f'{gene} {target} DASATINIB.'\n",
        "    sentencesDASATINIB.append(sentenceDASATINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "DEXAMETHASONE=pd.read_csv('*path/DATA/Drugs/DEXAMETHASONE.csv')\n",
        "sentencesDEXAMETHASONE = []\n",
        "for _, row in DEXAMETHASONE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceDEXAMETHASONE = f'{gene} {target} DEXAMETHASONE.'\n",
        "    sentencesDEXAMETHASONE.append(sentenceDEXAMETHASONE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "DEXRAZOXANE=pd.read_csv('*path/DATA/Drugs/DEXRAZOXANE.csv')\n",
        "sentencesDEXRAZOXANE = []\n",
        "for _, row in DEXRAZOXANE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceDEXRAZOXANE = f'{gene} {target} DEXRAZOXANE.'\n",
        "    sentencesDEXRAZOXANE.append(sentenceDEXRAZOXANE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "DINACICLIB=pd.read_csv('*path/DATA/Drugs/DINACICLIB.csv')\n",
        "sentencesDINACICLIB = []\n",
        "for _, row in DINACICLIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceDINACICLIB = f'{gene} {target} DINACICLIB.'\n",
        "    sentencesDINACICLIB.append(sentenceDINACICLIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ERLOTINIBHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/ERLOTINIB HYDROCHLORIDE.csv')\n",
        "sentencesERLOTINIBHYDROCHLORIDE = []\n",
        "for _, row in ERLOTINIBHYDROCHLORIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceERLOTINIBHYDROCHLORIDE = f'{gene} {target} ERLOTINIBHYDROCHLORIDE.'\n",
        "    sentencesERLOTINIBHYDROCHLORIDE.append(sentenceERLOTINIBHYDROCHLORIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ETOPOSIDE=pd.read_csv('*path/DATA/Drugs/ETOPOSIDE.csv')\n",
        "sentencesETOPOSIDE = []\n",
        "for _, row in ETOPOSIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceETOPOSIDE = f'{gene} {target} ETOPOSIDE.'\n",
        "    sentencesETOPOSIDE.append(sentenceETOPOSIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "EXEMESTANE=pd.read_csv('*path/DATA/Drugs/EXEMESTANE.csv')\n",
        "sentencesEXEMESTANE = []\n",
        "for _, row in ABT.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceEXEMESTANE = f'{gene} {target} EXEMESTANE.'\n",
        "    sentencesEXEMESTANE.append(sentenceEXEMESTANE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "GEFITINIB=pd.read_csv('*path/DATA/Drugs/GEFITINIB.csv')\n",
        "sentencesGEFITINIB = []\n",
        "for _, row in GEFITINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceGEFITINIB = f'{gene} {target} GEFITINIB.'\n",
        "    sentencesGEFITINIB.append(sentenceGEFITINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "GELDANAMYCIN=pd.read_csv('*path/DATA/Drugs/GELDANAMYCIN.csv')\n",
        "sentencesGELDANAMYCIN = []\n",
        "for _, row in GELDANAMYCIN.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceGELDANAMYCIN = f'{gene} {target} GELDANAMYCIN.'\n",
        "    sentencesGELDANAMYCIN.append(sentenceGELDANAMYCIN)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "IFOSFAMIDE=pd.read_csv('*path/DATA/Drugs/IFOSFAMIDE.csv')\n",
        "sentencesIFOSFAMIDE = []\n",
        "for _, row in IFOSFAMIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceIFOSFAMIDE= f'{gene} {target} IFOSFAMIDE.'\n",
        "    sentencesIFOSFAMIDE.append(sentenceIFOSFAMIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "IMIQUIMOD=pd.read_csv('*path/DATA/Drugs/IMIQUIMOD.csv')\n",
        "sentencesIMIQUIMOD = []\n",
        "for _, row in IMIQUIMOD.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceIMIQUIMOD = f'{gene} {target} IMIQUIMOD.'\n",
        "    sentencesIMIQUIMOD.append(sentenceIMIQUIMOD)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "LAPATINIB=pd.read_csv('*path/DATA/Drugs/LAPATINIB.csv')\n",
        "sentencesLAPATINIB = []\n",
        "for _, row in LAPATINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceLAPATINIB = f'{gene} {target} LAPATINIB.'\n",
        "    sentencesLAPATINIB.append(sentenceLAPATINIB)\n",
        "# read DPI file and convert to sentences\\\n",
        "LENALIDOMIDE=pd.read_csv('*path/DATA/Drugs/LENALIDOMIDE.csv')\n",
        "sentencesLENALIDOMIDE = []\n",
        "for _, row in LENALIDOMIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceLENALIDOMIDE = f'{gene} {target} LENALIDOMIDE.'\n",
        "    sentencesLENALIDOMIDE.append(sentenceLENALIDOMIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "LETROZOLE=pd.read_csv('*path/DATA/Drugs/LETROZOLE.csv')\n",
        "sentencesLETROZOLE = []\n",
        "for _, row in LETROZOLE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceLETROZOLE = f'{gene} {target} LETROZOLE.'\n",
        "    sentencesLETROZOLE.append(sentenceLETROZOLE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "MEGESTROLACETATE=pd.read_csv('*path/DATA/Drugs/MEGESTROL ACETATE.csv')\n",
        "sentencesMEGESTROLACETATE = []\n",
        "for _, row in MEGESTROLACETATE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMEGESTROLACETATE = f'{gene} {target} MEGESTROLACETATE.'\n",
        "    sentencesMEGESTROLACETATE.append(sentenceMEGESTROLACETATE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "METFORMIN=pd.read_csv('*path/DATA/Drugs/METFORMIN.csv')\n",
        "sentencesMETFORMIN = []\n",
        "for _, row in METFORMIN.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMETFORMIN = f'{gene} {target} METFORMIN.'\n",
        "    sentencesMETFORMIN.append(sentenceMETFORMIN)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "METHOXSALEN=pd.read_csv('*path/DATA/Drugs/METHOXSALEN.csv')\n",
        "sentencesMETHOXSALEN = []\n",
        "for _, row in METHOXSALEN.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMETHOXSALEN = f'{gene} {target} METHOXSALEN.'\n",
        "    sentencesMETHOXSALEN.append(sentenceMETHOXSALEN)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "MITOTANE=pd.read_csv('*path/DATA/Drugs/MITOTANE.csv')\n",
        "sentencesMITOTANE = []\n",
        "for _, row in MITOTANE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMITOTANE = f'{gene} {target} MITOTANE.'\n",
        "    sentencesMITOTANE.append(sentenceMITOTANE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "MK2206=pd.read_csv('*path/DATA/Drugs/MK-2206.csv')\n",
        "sentencesMK2206 = []\n",
        "for _, row in MK2206.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMK2206 = f'{gene} {target} MK-2206.'\n",
        "    sentencesMK2206.append(sentenceMK2206)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "MK5108=pd.read_csv('*path/DATA/Drugs/MK-5108.csv')\n",
        "sentencesMK5108 = []\n",
        "for _, row in MK5108.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceMK5108 = f'{gene} {target} MK-5108.'\n",
        "    sentencesMK5108.append(sentenceMK5108)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "NILOTINIB=pd.read_csv('*path/DATA/Drugs/NILOTINIB.csv')\n",
        "sentencesNILOTINIB = []\n",
        "for _, row in NILOTINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceNILOTINIB = f'{gene} {target} NILOTINIB.'\n",
        "    sentencesNILOTINIB.append(sentenceNILOTINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "PAZOPANIBHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/PAZOPANIB HYDROCHLORIDE.csv')\n",
        "sentencesPAZOPANIBHYDROCHLORIDE = []\n",
        "for _, row in PAZOPANIBHYDROCHLORIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentencePAZOPANIBHYDROCHLORIDE = f'{gene} {target} PAZOPANIBHYDROCHLORIDE.'\n",
        "    sentencesPAZOPANIBHYDROCHLORIDE.append(sentencePAZOPANIBHYDROCHLORIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "PROCARBAZINEHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/PROCARBAZINE HYDROCHLORIDE.csv')\n",
        "sentencesPROCARBAZINEHYDROCHLORIDE = []\n",
        "for _, row in PROCARBAZINEHYDROCHLORIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentencePROCARBAZINEHYDROCHLORIDE = f'{gene} {target} PROCARBAZINEHYDROCHLORIDE.'\n",
        "    sentencesPROCARBAZINEHYDROCHLORIDE.append(sentencePROCARBAZINEHYDROCHLORIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "PD325901=pd.read_csv('*path/DATA/Drugs/PD325901.csv')\n",
        "sentencesPD325901 = []\n",
        "for _, row in PD325901.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentencePD325901 = f'{gene} {target} PD325901.'\n",
        "    sentencesPD325901.append(sentencePD325901)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "PROCARBAZINE=pd.read_csv('*path/DATA/Drugs/PROCARBAZINE.csv')\n",
        "sentencesPROCARBAZINE = []\n",
        "for _, row in PROCARBAZINE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentencePROCARBAZINE = f'{gene} {target} PROCARBAZINE.'\n",
        "    sentencesPROCARBAZINE.append(sentencePROCARBAZINE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "RUXOLITINIB=pd.read_csv('*path/DATA/Drugs/RUXOLITINIB.csv')\n",
        "sentencesRUXOLITINIB = []\n",
        "for _, row in RUXOLITINIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceRUXOLITINIB = f'{gene} {target} RUXOLITINIB.'\n",
        "    sentencesRUXOLITINIB.append(sentenceRUXOLITINIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "TEMOZOLOMIDE=pd.read_csv('*path/DATA/TEMOZOLOMIDE.csv')\n",
        "sentencesTEMOZOLOMIDE = []\n",
        "for _, row in TEMOZOLOMIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceTEMOZOLOMIDE = f'{gene} {target} TEMOZOLOMIDE.'\n",
        "    sentencesTEMOZOLOMIDE.append(sentenceTEMOZOLOMIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "THALIDOMIDE=pd.read_csv('*path/DATA/Drugs/THALIDOMIDE.csv')\n",
        "sentencesTHALIDOMIDE = []\n",
        "for _, row in THALIDOMIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceTHALIDOMIDE = f'{gene} {target} THALIDOMIDE.'\n",
        "    sentencesTHALIDOMIDE.append(sentenceTHALIDOMIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "THIOTEPA=pd.read_csv('*path/DATA/Drugs/THIOTEPA.csv')\n",
        "sentencesTHIOTEPA = []\n",
        "for _, row in THIOTEPA.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceTHIOTEPA = f'{gene} {target} THIOTEPA.'\n",
        "    sentencesTHIOTEPA.append(sentenceTHIOTEPA)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "TOPOTECANHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/TOPOTECAN HYDROCHLORIDE.csv')\n",
        "sentencesTOPOTECANHYDROCHLORIDE = []\n",
        "for _, row in TOPOTECANHYDROCHLORIDE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceTOPOTECANHYDROCHLORIDE = f'{gene} {target} TOPOTECANHYDROCHLORIDE.'\n",
        "    sentencesTOPOTECANHYDROCHLORIDE.append(sentenceTOPOTECANHYDROCHLORIDE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "TRETINOIN=pd.read_csv('*path/DATA/Drugs/ABT-888.csv')\n",
        "sentencesTRETINOIN = []\n",
        "for _, row in TRETINOIN.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceTRETINOIN = f'{gene} {target} TRETINOIN.'\n",
        "    sentencesTRETINOIN.append(sentenceTRETINOIN)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "VEMURAFENIB=pd.read_csv('*path/DATA/Drugs/VEMURAFENIB.csv')\n",
        "sentencesVEMURAFENIB = []\n",
        "for _, row in VEMURAFENIB.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceVEMURAFENIB = f'{gene} {target} VEMURAFENIB.'\n",
        "    sentencesVEMURAFENIB.append(sentenceVEMURAFENIB)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "FLUORODEOXYURIDINE=pd.read_csv('*path/DATA/Drugs/FLUORODEOXYURIDINE.csv')\n",
        "sentencesFLUORODEOXYURIDINE = []\n",
        "for _, row in FLUORODEOXYURIDINE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceFLUORODEOXYURIDINE = f'{gene} {target} 5-FLUORO-2-DEOXYURIDINE.'\n",
        "    sentencesFLUORODEOXYURIDINE.append(sentenceFLUORODEOXYURIDINE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ALTRETAMINE=pd.read_csv('*path/DATA/Drugs/ALTRETAMINE.csv')\n",
        "sentencesALTRETAMINE = []\n",
        "for _, row in ALTRETAMINE.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceALTRETAMINE = f'{gene} {target} ALTRETAMINE.'\n",
        "    sentencesALTRETAMINE.append(sentenceALTRETAMINE)\n",
        "\n",
        "# read DPI file and convert to sentences\\\n",
        "ZOLINZA=pd.read_csv('*path/DATA/Drugs/ZOLINZA.csv')\n",
        "sentencesZOLINZA = []\n",
        "for _, row in ZOLINZA.iterrows():\n",
        "    gene = row['Gene(s)']\n",
        "    target = row['Target']\n",
        "    sentenceZOLINZA = f'{gene} {target} ZOLINZA.'\n",
        "    sentencesZOLINZA.append(sentenceZOLINZA)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# PPI from STRING file and convert to sentences\\\n",
        "PPI_drug=PPI_drug.iloc[:,0:2]\n",
        "sentencesPPI = []\n",
        "for _, row in PPI_drug.iterrows():\n",
        "    protein1 = row['#node1']\n",
        "    protein2 = row['node2']\n",
        "    sentencePPI = f'{protein1} interacts {protein2}.'\n",
        "    sentencesPPI.append(sentencePPI)\n"
      ],
      "metadata": {
        "id": "3CX817azaKly"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FdX4rQVonXMp"
      },
      "outputs": [],
      "source": [
        "# add 10 top essential genes for each cell line\n",
        "sentencescell = []\n",
        "for index, row in topgeneforcelllines.iterrows():\n",
        "    cell_line = row['cell line name']\n",
        "    for gene in row[1:]:\n",
        "        if isinstance(gene, str):\n",
        "            sentence = f\"{gene} associates {cell_line}.\"\n",
        "            sentencescell.append(sentence)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UK0q7UbAnXmB"
      },
      "outputs": [],
      "source": [
        "# read PPI from STRING file and convert to sentences\\\n",
        "\n",
        "PPI_cellline=PPI_cellline.iloc[:,0:2]\n",
        "sentencesPPICELLLINE = []\n",
        "for _, row in PPI_cellline.iterrows():\n",
        "    protein1 = row['#node1']\n",
        "    protein2 = row['node2']\n",
        "    sentencePPICELLLINE = f'{protein1} interacts {protein2}.'\n",
        "    sentencesPPICELLLINE.append(sentencePPICELLLINE)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4lplimy4J4cz"
      },
      "outputs": [],
      "source": [
        "#create merged_list includes all of sentences\n",
        "merged_list = []\n",
        "merged_list.extend(sentencesfu)\n",
        "merged_list.extend(sentencesABT)\n",
        "merged_list.extend(sentencesALLOPURINOL)\n",
        "merged_list.extend(sentencesAMIFOSTINE)\n",
        "merged_list.extend(sentencesANASTROZOLE)\n",
        "merged_list.extend(sentencesAXITINIB)\n",
        "merged_list.extend(sentencesAZD1775)\n",
        "merged_list.extend(sentencesBEZ)\n",
        "merged_list.extend(sentencesBORTEZOMIB)\n",
        "merged_list.extend(sentencesBUSULFAN)\n",
        "merged_list.extend(sentencesCELECOXIB)\n",
        "merged_list.extend(sentencesCHEMBL277800)\n",
        "merged_list.extend(sentencesCHLORAMBUCIL)\n",
        "merged_list.extend(sentencesCRIZOTINIB)\n",
        "merged_list.extend(sentencesDASATINIB)\n",
        "merged_list.extend(sentencesDEXAMETHASONE)\n",
        "merged_list.extend(sentencesDEXRAZOXANE)\n",
        "merged_list.extend(sentencesERLOTINIBHYDROCHLORIDE)\n",
        "merged_list.extend(sentencesDINACICLIB)\n",
        "merged_list.extend(sentencesETOPOSIDE)\n",
        "merged_list.extend(sentencesEXEMESTANE)\n",
        "merged_list.extend(sentencesGEFITINIB)\n",
        "merged_list.extend(sentencesGELDANAMYCIN)\n",
        "merged_list.extend(sentencesIFOSFAMIDE)\n",
        "merged_list.extend(sentencesIMIQUIMOD)\n",
        "merged_list.extend(sentencesLAPATINIB)\n",
        "merged_list.extend(sentencesLENALIDOMIDE)\n",
        "merged_list.extend(sentencesLETROZOLE)\n",
        "merged_list.extend(sentencesMEGESTROLACETATE)\n",
        "merged_list.extend(sentencesMETFORMIN)\n",
        "merged_list.extend(sentencesMETHOXSALEN)\n",
        "merged_list.extend(sentencesMITOTANE)\n",
        "merged_list.extend(sentencesMK2206)\n",
        "merged_list.extend(sentencesMK5108)\n",
        "merged_list.extend(sentencesNILOTINIB)\n",
        "merged_list.extend(sentencesPAZOPANIBHYDROCHLORIDE)\n",
        "merged_list.extend(sentencesPROCARBAZINEHYDROCHLORIDE)\n",
        "merged_list.extend(sentencesPD325901)\n",
        "merged_list.extend(sentencesPROCARBAZINE)\n",
        "merged_list.extend(sentencesRUXOLITINIB)\n",
        "merged_list.extend(sentencesTEMOZOLOMIDE)\n",
        "merged_list.extend(sentencesTHALIDOMIDE)\n",
        "merged_list.extend(sentencesTHIOTEPA)\n",
        "merged_list.extend(sentencesTOPOTECANHYDROCHLORIDE)\n",
        "merged_list.extend(sentencesTRETINOIN)\n",
        "merged_list.extend(sentencesVEMURAFENIB)\n",
        "merged_list.extend(sentencesFLUORODEOXYURIDINE)\n",
        "merged_list.extend(sentencesZOLINZA)\n",
        "merged_list.extend(sentencesALTRETAMINE)\n",
        "merged_list.extend(sentencesPPI)\n",
        "merged_list.extend(sentencescell)\n",
        "merged_list.extend(sentencesPPICELLLINE)\n",
        "merged_list.extend(sentencesdrugcell)\n",
        "merged_list.extend(sentences_positivecorrelated )\n",
        "merged_list.extend(sentences_negativecorrelated )\n",
        "merged_list.extend(sentences_uncorrelated )\n",
        "merged_list.extend(sentences_similar)\n",
        "merged_list.extend(sentences_dissimilar)\n",
        "merged_list=list(set(merged_list))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dt3Gz-uYoGx0"
      },
      "outputs": [],
      "source": [
        "#construct Knowledge Graph\n",
        "# Ensure the necessary NLTK data is downloaded\n",
        "nltk.download('punkt')\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "seed = 3\n",
        "np.random.seed(seed)\n",
        "gensim.utils.random.seed(seed)\n",
        "data=[]\n",
        "sets=merged_list\n",
        "for s in sets:\n",
        "  for i in sent_tokenize(s):\n",
        "      temp = []\n",
        "      # tokenize the sentence into words\n",
        "      for j in word_tokenize(i):\n",
        "          temp.append(j.lower())\n",
        "      data.append(temp)\n",
        "model1 = gensim.models.Word2Vec(min_count = 1, alpha=0.001, vector_size =128, window = 3, epochs=100,sg=0,seed=seed)\n",
        "model1.build_vocab(data, progress_per=1000)\n",
        "model1.train(data, total_examples=model1.corpus_count, epochs=500, report_delay=1)\n",
        "model1.init_sims(replace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NtfhwgK_hm91"
      },
      "outputs": [],
      "source": [
        "cell_line_name_lower=[s.lower() for s in cellline_CCLE_EXP.index]\n",
        "# create a list of vectors, one for each cell_line name\n",
        "cell_vectors = [model1.wv[d] for d in cell_line_name_lower]\n",
        "\n",
        "# create a list of column labels for the vector dimensions\n",
        "column_labels = [f\"WVcell{i+1}\" for i in range(model1.vector_size)]\n",
        "\n",
        "# create a Pandas DataFrame where each row is a drug name and its corresponding vector\n",
        "KG_cell_line_feature = pd.DataFrame(cell_vectors, index=cellline_CCLE_EXP.index, columns=column_labels)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drugnames_lower=[s.lower() for s in druginfo['drug_name']]\n",
        "# create a list of vectors, one for each drug name\n",
        "drug_vectors = [model1.wv[d] for d in drugnames_lower]\n",
        "\n",
        "# create a list of column labels for the vector dimensions\n",
        "column_labels = [f\"WV{i+1}\" for i in range(model1.vector_size)]\n",
        "\n",
        "# create a Pandas DataFrame where each row is a drug name and its corresponding vector\n",
        "KG_drug_feature = pd.DataFrame(drug_vectors, index=druginfo['drug_name'], columns=column_labels)"
      ],
      "metadata": {
        "id": "pVWy8zHejLMI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#save KnowledgeGraph representation of drugs and cell lines\n",
        "KG_cell_line_feature.to_excel('*path/DATA/KG_cell_line_feature.xlsx',index=True)\n",
        "KG_drug_feature.to_excel('*/path/DATA/KG_drug_feature.xlsx',index=True)"
      ],
      "metadata": {
        "id": "9BzfBSFimV-g"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}