# -*- coding: utf-8 -*-
"""Function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mBbA0dr9S2b0QyX418Vupf9aRGPHGWGE
"""

from scipy.stats import pearsonr

def tanh_normalize(x):
    return np.tanh(x)

from sklearn.metrics import roc_auc_score, precision_recall_curve, mean_squared_error, r2_score
def regression_metric(ytrue, ypred):
    rmse = mean_squared_error(y_true=ytrue, y_pred=ypred, squared=False)
    r2 = r2_score(y_true=ytrue, y_pred=ypred)
    r, p = pearsonr(ytrue, ypred)
    return rmse, r2, r



def cosine_similarity(arr1, arr2):
    dot_product = np.dot(arr1, arr2)
    norm1 = np.linalg.norm(arr1)
    norm2 = np.linalg.norm(arr2)
    similarity = dot_product / (norm1 * norm2)
    return similarity



def train(drug_feature_set, cline_feature_set, synergy_adj, index, label):
    loss_train = 0
    true_ls, pre_ls = [], []
    optimizer.zero_grad()
    for batch, (drug, cline) in enumerate(zip(drug_feature_set, cline_feature_set)):
        pred= model(drug[0], cline[0], synergy_adj,index[:, 0], index[:, 1], index[:, 2])
        loss = loss_func(pred, label)
        loss =  loss
        loss.backward()
        optimizer.step()
        loss_train += loss.item()
        true_ls += label_train.cpu().detach().numpy().tolist()
        pre_ls += pred.cpu().detach().numpy().tolist()
    rmse, r2, pr = regression_metric(true_ls, pre_ls)
    return [rmse, r2, pr], loss_train
def test(drug_feature_set, cline_feature_set, synergy_adj, index, label):
    model.eval()
    with torch.no_grad():
        for batch, (drug, cline) in enumerate(zip(drug_feature_set, cline_feature_set)):
            pred = model(drug[0], cline[0], synergy_adj, index[:, 0], index[:, 1], index[:, 2])
        loss = loss_func(pred, label)
        loss = loss
        rmse, r2, pr = regression_metric(label.cpu().detach().numpy(),
                                         pred.cpu().detach().numpy())
        return [rmse, r2, pr], loss.item(),pred.cpu().detach().numpy()



def data_split(synergy, rd_seed=3):
    synergy_pos = pd.DataFrame([i for i in syn])

    # -----split synergy into 5CV,test set
    train_size = 0.9
    synergy_data, synergy_test = np.split(np.array(synergy_pos.sample(frac=1, random_state=rd_seed)),
                                             [int(train_size * len(synergy_pos))])

    test_label = torch.from_numpy(np.array(synergy_test[:, 3], dtype='float32'))
    test_ind = torch.from_numpy(np.array(synergy_test[:, 0:3])).long()
    return synergy_data, test_ind, test_label