# -*- coding: utf-8 -*-
"""Knowledge_Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RBUmPy_rHoaTpCtiNYCYsqFzpMWL4vHv
"""

#install packages
pip install nltk
pip install gensim

#import packages
import pandas as pd
import numpy as np
import h5py
import gensim
from gensim.models import Word2Vec
import nltk
nltk.download('punkt')
from nltk.tokenize import sent_tokenize, word_tokenize
import warnings
from collections import defaultdict  # For word frequency
import spacy  # For preprocessing
from Function import tanh_normalize,cosine_similarity
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

extract=pd.read_excel("*path/DATA/extract.xlsx")
druginfo=pd.read_csv("*path/DATA/drugsinfo.csv")
cellline_LINCS_EXP=pd.read_csv('*path/DATA/cellline_LINCS_EXP.csv')
cellline_CCLE_EXP=pd.read_csv('*path/DATA/cellline_CCLE_EXP.csv').set_index('cell_line_name')
PPI_drug=pd.read_csv('*path/DATA/PPI.csv')
topgenesforcelllines=pd.read_csv('*path/DATA/topgenesforcelllines.csv')
PPI_cellline=pd.read_csv('*path/DATA/PPICELLLINE.csv')
df=pd.read_csv('*path/DATA/df.csv').set_index(['drug_row','drug_col','cell_line_name']) #df includes GP features of drug_A and drug_B and gene expression of cell line from LINCS

GP_a=np.asarray(df.iloc[:,0:978])
GP_b=np.asarray(df.iloc[:,978:1956])
GEXP_cellline=np.asarray(df.iloc[:,1956:2934])
# get the corr between corresponding rows
corr_array = []
for i in range(GP_a.shape[0]):
    row1 = GP_a[i]
    row2 = GP_b[i]
    corr = np.corrcoef(row1, row2)[0,1]
    corr_array.append(corr)
# get the distance between corresponding rows
euclidean_array = []
for i in range(GP_a.shape[0]):
    row1 = GP_a[i]
    row2 = GP_b[i]
    corr = np.corrcoef(row1, row2)[0,1]
    euclidean_dist = np.sqrt(2*(1-corr))
    euclidean_array.append(euclidean_dist)
# get the corr between GP_a and GEXP
corrdrug1cell = []
for i in range(d1.shape[0]):
    row1 = np.apply_along_axis(tanh_normalize, axis=0, arr=GP_a[i])
    row3 = np.apply_along_axis(tanh_normalize, axis=0, arr=GEXP[i])
    corr = np.corrcoef(row1, row3)[0, 1]
    corrdrug1cell.append(corr)
# Compare the values in the two columns elementwise
result = np.array(corrdrug1cell) < 0
coldrug1cell = np.where(result, 1, 0)    # Create a new column with the results
# get the corr between GP_b and GEXP
corrdrug2cell = []
for i in range(d1.shape[0]):
    row1 = np.apply_along_axis(tanh_normalize, axis=0, arr=GP_b[i])
    row3 = np.apply_along_axis(tanh_normalize, axis=0, arr=GEXP[i])
    corr = np.corrcoef(row1, row3)[0, 1]
    corrdrug1cell.append(corr)
# Compare the values in the two columns elementwise
result = np.array(corrdrug2cell) < 0
coldrug2cell = np.where(result, 1, 0) # Create a new column with the results

#add corr and dis and corrdrug1cell and corrdrug1cell columns on df
df['corr']=corr_array
df['dis']=euclidean_array
df['corrdrug1cell']=coldrug1cell
df['corrdrug2cell']=coldrug2cell

#get cosine similarity on cellline_CCLE_EXP
scaler = StandardScaler()
cellline_CCLE_EXP_normalized = pd.DataFrame(scaler.fit_transform(cellline_CCLE_EXP.T).T, index=cellline_CCLE_EXP.index, columns=cellline_CCLE_EXP.columns)
# Calculate cosine similarity
cos_sim_matrix = cosine_similarity(cellline_CCLE_EXP_normalized.values)
# Convert the result to a DataFrame for better readability
cos_sim_cellline_CCLE_EXP = pd.DataFrame(cos_sim_matrix, index=cellline_CCLE_EXP.index, columns=cellline_CCLE_EXP.index)

#create similar sentences on cellline_CCLE_EXP
sentences_similar = []
for i in rang(len(cellline_CCLE_EXP.index)):
    for j in range(i+1, len(llline_CCLE_EXP.index)):
        if 0.7<= cos_sim_c.iloc[i, j]<1  :
            sentence = f"{cos_sim_cellline_CCLE_EXP.columns[i]} similar {cos_sim_cellline_CCLE_EXP.columns[j]}."
            sentences_similar.append(sentence)
#create dissimilar sentences on cellline_CCLE_EXP
sentences_dissimilar = []
for i in range(len(llline_CCLE_EXP.index)):
    for j in range(i+1, len(llline_CCLE_EXP.index)):
        if cos_sim_cellline_CCLE_EXP.iloc[i, j] <.7 :
            sentence = f"{cos_sim_cellline_CCLE_EXP.columns[i]} dissimilar {cos_sim_cellline_CCLE_EXP.columns[j]}."
            sentences_dissimilar.append(sentence)

#create sentences based on the relation between cellline_LINCS_EXP
correlation_matrix = cellline_LINCS_EXP.corr()
sentences_positivecorrelated = []
for i in range(len(cellline_LINCS_EXP.columns)):
    for j in range(i+1, len(cellline_LINCS_EXP.columns)):
        if correlation_matrix.iloc[i, j] >=0.5 :
            sentence = f"{cellline_LINCS_EXP.columns[i]} positivecorrelated {cellline_LINCS_EXP.columns[j]}."
            sentences_positivecorrelated .append(sentence)
sentences_negativecorrelated = []
for i in range(len(cellline_LINCS_EXP.columns)):
    for j in range(i+1, len(cellline_LINCS_EXP.columns)):
        if correlation_matrix.iloc[i, j]<-0.1 :
            sentence = f"{cellline_LINCS_EXP.columns[i]} negativecorrelated {cellline_LINCS_EXP.columns[j]}."
            sentences_negativecorrelated .append(sentence)
sentences_uncorrelated = []
for i in range(len(cellline_LINCS_EXP.columns)):
    for j in range(i+1, len(cellline_LINCS_EXP.columns)):
        if -0.1<correlation_matrix.iloc[i, j]<0.1 :
            sentence = f"{cellline_LINCS_EXP.columns[i]} uncorrelated {cellline_LINCS_EXP.columns[j]}."
            sentences_uncorrelated .append(sentence)

#create sentences based on the relation between drug response and cellline_LINCS_EXP
drug1cell=pd.DataFrame(df['corrdrug1cell'])
drug1cell=drug1cell.reset_index().drop_duplicates(subset=['drug_row','cell_line_name']).drop(columns=['drug_col'])
drug1cell=drug1cell.rename(columns={'drug_row':'drug','corrdrug1cell':'corr'})
drug2cell=pd.DataFrame(df['corrdrug2cell'])
drug2cell=drug2cell.reset_index().drop_duplicates(subset=['drug_col','cell_line_name']).drop(columns=['drug_row'])
drug2cell=drug2cell.rename(columns={'drug_col':'drug','corrdrug2cell':'corr'})
drugcell=pd.concat([drug1cell,drug2cell],axis=0)
drugcell=drugcell.drop_duplicates(subset=['drug','cell_line_name'])
drugcell['r']='ineffective'
drugcell.loc[drugcell['corr']==1,'r']='effective'
drugcell=drugcell.drop(columns=['corr'])
drugcell=drugcell.reset_index()
sentences_drugcell = []
for _, row in drugcell.iterrows():
    drug = row['drug']
    cell = row['cell_line_name']
    r=row['r']
    sentence = f'{drug} {r} {cell}.'
    sentences_drugcell.append(sentence)

#add drug targets and drug biomarkers
fu=pd.read_csv('*path/DATA/Drugs/5-FU.csv')
sentencesfu = []
for _, row in fu.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentencefu = f'{gene} {target} 5-FU.'
    sentencesfu.append(sentencefu)

# read DPI file and convert to sentences\
ABT=pd.read_csv('*path/DATA/Drugs/ABT-888.csv')
sentencesABT = []
for _, row in ABT.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceABT = f'{gene} {target} ABT-888.'
    sentencesABT.append(sentenceABT)

# read DPI file and convert to sentences\
ALLOPURINOL=pd.read_csv('*path/DATA/Drugs/ALLOPURINOL.csv')
sentencesALLOPURINOL = []
for _, row in ALLOPURINOL.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceALLOPURINOL = f'{gene} {target} ALLOPURINOL.'
    sentencesALLOPURINOL.append(sentenceALLOPURINOL)

# read DPI file and convert to sentences\
AMIFOSTINE=pd.read_csv('*path/DATA/Drugs/AMIFOSTINE.csv')
sentencesAMIFOSTINE = []
for _, row in AMIFOSTINE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceAMIFOSTINE = f'{gene} {target} AMIFOSTINE.'
    sentencesAMIFOSTINE.append(sentenceAMIFOSTINE)

# read DPI file and convert to sentences\
ANASTROZOLE=pd.read_csv('*path/DATA/Drugs/ANASTROZOLE.csv')
sentencesANASTROZOLE = []
for _, row in ANASTROZOLE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceANASTROZOLE = f'{gene} {target} ANASTROZOLE.'
    sentencesANASTROZOLE.append(sentenceANASTROZOLE)

# read DPI file and convert to sentences\
AXITINIB=pd.read_csv('*path/DATA/Drugs/AXITINIB.csv')
sentencesAXITINIB = []
for _, row in AXITINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceAXITINIB = f'{gene} {target} AXITINIB.'
    sentencesAXITINIB.append(sentenceAXITINIB)

# read DPI file and convert to sentences\
AZD1775=pd.read_csv('*path/DATA/Drugs/AZD1775.csv')
sentencesAZD1775 = []
for _, row in AZD1775.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceAZD1775 = f'{gene} {target} AZD1775.'
    sentencesAZD1775.append(sentenceAZD1775)

# read DPI file and convert to sentences\
BEZ=pd.read_csv('*path/DATA/Drugs/BEZ-235.csv')
sentencesBEZ = []
for _, row in BEZ.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceBEZ = f'{gene} {target} BEZ-235.'
    sentencesBEZ.append(sentenceBEZ)

# read DPI file and convert to sentences\
BORTEZOMIB=pd.read_csv('*path/DATA/Drugs/BORTEZOMIB.csv')
sentencesBORTEZOMIB = []
for _, row in BORTEZOMIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceBORTEZOMIB = f'{gene} {target} BORTEZOMIB.'
    sentencesBORTEZOMIB.append(sentenceBORTEZOMIB)

# read DPI file and convert to sentences\
BUSULFAN=pd.read_csv('*path/DATA/Drugs/BUSULFAN.csv')
sentencesBUSULFAN = []
for _, row in BUSULFAN.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceBUSULFAN = f'{gene} {target} ABUSULFAN.'
    sentencesBUSULFAN.append(sentenceBUSULFAN)

# read DPI file and convert to sentences\
CELECOXIB=pd.read_csv('*path/DATA/Drugs/CELECOXIB.csv')
sentencesCELECOXIB = []
for _, row in CELECOXIB.iterrows():
    drug = row['drug']
    target = row['target']
    sentenceCELECOXIB = f'{target} target CELECOXIB.'
    sentencesCELECOXIB.append(sentenceCELECOXIB)

# read DPI file and convert to sentences\
CHEMBL277800=pd.read_csv('*path/DATA/Drugs/CHEMBL277800.csv')
sentencesCHEMBL277800 = []
for _, row in CHEMBL277800.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceCHEMBL277800 = f'{gene} {target} CHEMBL277800.'
    sentencesCHEMBL277800.append(sentenceCHEMBL277800)

# read DPI file and convert to sentences\
CHLORAMBUCIL=pd.read_csv('*path/DATA/Drugs/CHLORAMBUCIL.csv')
sentencesCHLORAMBUCIL = []
for _, row in CHLORAMBUCIL.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceCHLORAMBUCIL = f'{gene} {target} CHLORAMBUCIL.'
    sentencesCHLORAMBUCIL.append(sentenceCHLORAMBUCIL)

# read DPI file and convert to sentences\
CRIZOTINIB=pd.read_csv('*path/DATA/Drugs/CRIZOTINIB.csv')
sentencesCRIZOTINIB = []
for _, row in CRIZOTINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceCRIZOTINIB = f'{gene} {target} CRIZOTINIB.'
    sentencesCRIZOTINIB.append(sentenceCRIZOTINIB)

# read DPI file and convert to sentences\
DASATINIB=pd.read_csv('*path/DATA/Drugs/dasatanib.csv')
sentencesDASATINIB = []
for _, row in DASATINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceDASATINIB = f'{gene} {target} DASATINIB.'
    sentencesDASATINIB.append(sentenceDASATINIB)

# read DPI file and convert to sentences\
DEXAMETHASONE=pd.read_csv('*path/DATA/Drugs/DEXAMETHASONE.csv')
sentencesDEXAMETHASONE = []
for _, row in DEXAMETHASONE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceDEXAMETHASONE = f'{gene} {target} DEXAMETHASONE.'
    sentencesDEXAMETHASONE.append(sentenceDEXAMETHASONE)

# read DPI file and convert to sentences\
DEXRAZOXANE=pd.read_csv('*path/DATA/Drugs/DEXRAZOXANE.csv')
sentencesDEXRAZOXANE = []
for _, row in DEXRAZOXANE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceDEXRAZOXANE = f'{gene} {target} DEXRAZOXANE.'
    sentencesDEXRAZOXANE.append(sentenceDEXRAZOXANE)

# read DPI file and convert to sentences\
DINACICLIB=pd.read_csv('*path/DATA/Drugs/DINACICLIB.csv')
sentencesDINACICLIB = []
for _, row in DINACICLIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceDINACICLIB = f'{gene} {target} DINACICLIB.'
    sentencesDINACICLIB.append(sentenceDINACICLIB)

# read DPI file and convert to sentences\
ERLOTINIBHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/ERLOTINIB HYDROCHLORIDE.csv')
sentencesERLOTINIBHYDROCHLORIDE = []
for _, row in ERLOTINIBHYDROCHLORIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceERLOTINIBHYDROCHLORIDE = f'{gene} {target} ERLOTINIBHYDROCHLORIDE.'
    sentencesERLOTINIBHYDROCHLORIDE.append(sentenceERLOTINIBHYDROCHLORIDE)

# read DPI file and convert to sentences\
ETOPOSIDE=pd.read_csv('*path/DATA/Drugs/ETOPOSIDE.csv')
sentencesETOPOSIDE = []
for _, row in ETOPOSIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceETOPOSIDE = f'{gene} {target} ETOPOSIDE.'
    sentencesETOPOSIDE.append(sentenceETOPOSIDE)

# read DPI file and convert to sentences\
EXEMESTANE=pd.read_csv('*path/DATA/Drugs/EXEMESTANE.csv')
sentencesEXEMESTANE = []
for _, row in ABT.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceEXEMESTANE = f'{gene} {target} EXEMESTANE.'
    sentencesEXEMESTANE.append(sentenceEXEMESTANE)

# read DPI file and convert to sentences\
GEFITINIB=pd.read_csv('*path/DATA/Drugs/GEFITINIB.csv')
sentencesGEFITINIB = []
for _, row in GEFITINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceGEFITINIB = f'{gene} {target} GEFITINIB.'
    sentencesGEFITINIB.append(sentenceGEFITINIB)

# read DPI file and convert to sentences\
GELDANAMYCIN=pd.read_csv('*path/DATA/Drugs/GELDANAMYCIN.csv')
sentencesGELDANAMYCIN = []
for _, row in GELDANAMYCIN.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceGELDANAMYCIN = f'{gene} {target} GELDANAMYCIN.'
    sentencesGELDANAMYCIN.append(sentenceGELDANAMYCIN)

# read DPI file and convert to sentences\
IFOSFAMIDE=pd.read_csv('*path/DATA/Drugs/IFOSFAMIDE.csv')
sentencesIFOSFAMIDE = []
for _, row in IFOSFAMIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceIFOSFAMIDE= f'{gene} {target} IFOSFAMIDE.'
    sentencesIFOSFAMIDE.append(sentenceIFOSFAMIDE)

# read DPI file and convert to sentences\
IMIQUIMOD=pd.read_csv('*path/DATA/Drugs/IMIQUIMOD.csv')
sentencesIMIQUIMOD = []
for _, row in IMIQUIMOD.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceIMIQUIMOD = f'{gene} {target} IMIQUIMOD.'
    sentencesIMIQUIMOD.append(sentenceIMIQUIMOD)

# read DPI file and convert to sentences\
LAPATINIB=pd.read_csv('*path/DATA/Drugs/LAPATINIB.csv')
sentencesLAPATINIB = []
for _, row in LAPATINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceLAPATINIB = f'{gene} {target} LAPATINIB.'
    sentencesLAPATINIB.append(sentenceLAPATINIB)
# read DPI file and convert to sentences\
LENALIDOMIDE=pd.read_csv('*path/DATA/Drugs/LENALIDOMIDE.csv')
sentencesLENALIDOMIDE = []
for _, row in LENALIDOMIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceLENALIDOMIDE = f'{gene} {target} LENALIDOMIDE.'
    sentencesLENALIDOMIDE.append(sentenceLENALIDOMIDE)

# read DPI file and convert to sentences\
LETROZOLE=pd.read_csv('*path/DATA/Drugs/LETROZOLE.csv')
sentencesLETROZOLE = []
for _, row in LETROZOLE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceLETROZOLE = f'{gene} {target} LETROZOLE.'
    sentencesLETROZOLE.append(sentenceLETROZOLE)

# read DPI file and convert to sentences\
MEGESTROLACETATE=pd.read_csv('*path/DATA/Drugs/MEGESTROL ACETATE.csv')
sentencesMEGESTROLACETATE = []
for _, row in MEGESTROLACETATE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMEGESTROLACETATE = f'{gene} {target} MEGESTROLACETATE.'
    sentencesMEGESTROLACETATE.append(sentenceMEGESTROLACETATE)

# read DPI file and convert to sentences\
METFORMIN=pd.read_csv('*path/DATA/Drugs/METFORMIN.csv')
sentencesMETFORMIN = []
for _, row in METFORMIN.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMETFORMIN = f'{gene} {target} METFORMIN.'
    sentencesMETFORMIN.append(sentenceMETFORMIN)

# read DPI file and convert to sentences\
METHOXSALEN=pd.read_csv('*path/DATA/Drugs/METHOXSALEN.csv')
sentencesMETHOXSALEN = []
for _, row in METHOXSALEN.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMETHOXSALEN = f'{gene} {target} METHOXSALEN.'
    sentencesMETHOXSALEN.append(sentenceMETHOXSALEN)

# read DPI file and convert to sentences\
MITOTANE=pd.read_csv('*path/DATA/Drugs/MITOTANE.csv')
sentencesMITOTANE = []
for _, row in MITOTANE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMITOTANE = f'{gene} {target} MITOTANE.'
    sentencesMITOTANE.append(sentenceMITOTANE)

# read DPI file and convert to sentences\
MK2206=pd.read_csv('*path/DATA/Drugs/MK-2206.csv')
sentencesMK2206 = []
for _, row in MK2206.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMK2206 = f'{gene} {target} MK-2206.'
    sentencesMK2206.append(sentenceMK2206)

# read DPI file and convert to sentences\
MK5108=pd.read_csv('*path/DATA/Drugs/MK-5108.csv')
sentencesMK5108 = []
for _, row in MK5108.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceMK5108 = f'{gene} {target} MK-5108.'
    sentencesMK5108.append(sentenceMK5108)

# read DPI file and convert to sentences\
NILOTINIB=pd.read_csv('*path/DATA/Drugs/NILOTINIB.csv')
sentencesNILOTINIB = []
for _, row in NILOTINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceNILOTINIB = f'{gene} {target} NILOTINIB.'
    sentencesNILOTINIB.append(sentenceNILOTINIB)

# read DPI file and convert to sentences\
PAZOPANIBHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/PAZOPANIB HYDROCHLORIDE.csv')
sentencesPAZOPANIBHYDROCHLORIDE = []
for _, row in PAZOPANIBHYDROCHLORIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentencePAZOPANIBHYDROCHLORIDE = f'{gene} {target} PAZOPANIBHYDROCHLORIDE.'
    sentencesPAZOPANIBHYDROCHLORIDE.append(sentencePAZOPANIBHYDROCHLORIDE)

# read DPI file and convert to sentences\
PROCARBAZINEHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/PROCARBAZINE HYDROCHLORIDE.csv')
sentencesPROCARBAZINEHYDROCHLORIDE = []
for _, row in PROCARBAZINEHYDROCHLORIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentencePROCARBAZINEHYDROCHLORIDE = f'{gene} {target} PROCARBAZINEHYDROCHLORIDE.'
    sentencesPROCARBAZINEHYDROCHLORIDE.append(sentencePROCARBAZINEHYDROCHLORIDE)

# read DPI file and convert to sentences\
PD325901=pd.read_csv('*path/DATA/Drugs/PD325901.csv')
sentencesPD325901 = []
for _, row in PD325901.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentencePD325901 = f'{gene} {target} PD325901.'
    sentencesPD325901.append(sentencePD325901)

# read DPI file and convert to sentences\
PROCARBAZINE=pd.read_csv('*path/DATA/Drugs/PROCARBAZINE.csv')
sentencesPROCARBAZINE = []
for _, row in PROCARBAZINE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentencePROCARBAZINE = f'{gene} {target} PROCARBAZINE.'
    sentencesPROCARBAZINE.append(sentencePROCARBAZINE)

# read DPI file and convert to sentences\
RUXOLITINIB=pd.read_csv('*path/DATA/Drugs/RUXOLITINIB.csv')
sentencesRUXOLITINIB = []
for _, row in RUXOLITINIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceRUXOLITINIB = f'{gene} {target} RUXOLITINIB.'
    sentencesRUXOLITINIB.append(sentenceRUXOLITINIB)

# read DPI file and convert to sentences\
TEMOZOLOMIDE=pd.read_csv('*path/DATA/TEMOZOLOMIDE.csv')
sentencesTEMOZOLOMIDE = []
for _, row in TEMOZOLOMIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceTEMOZOLOMIDE = f'{gene} {target} TEMOZOLOMIDE.'
    sentencesTEMOZOLOMIDE.append(sentenceTEMOZOLOMIDE)

# read DPI file and convert to sentences\
THALIDOMIDE=pd.read_csv('*path/DATA/Drugs/THALIDOMIDE.csv')
sentencesTHALIDOMIDE = []
for _, row in THALIDOMIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceTHALIDOMIDE = f'{gene} {target} THALIDOMIDE.'
    sentencesTHALIDOMIDE.append(sentenceTHALIDOMIDE)

# read DPI file and convert to sentences\
THIOTEPA=pd.read_csv('*path/DATA/Drugs/THIOTEPA.csv')
sentencesTHIOTEPA = []
for _, row in THIOTEPA.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceTHIOTEPA = f'{gene} {target} THIOTEPA.'
    sentencesTHIOTEPA.append(sentenceTHIOTEPA)

# read DPI file and convert to sentences\
TOPOTECANHYDROCHLORIDE=pd.read_csv('*path/DATA/Drugs/TOPOTECAN HYDROCHLORIDE.csv')
sentencesTOPOTECANHYDROCHLORIDE = []
for _, row in TOPOTECANHYDROCHLORIDE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceTOPOTECANHYDROCHLORIDE = f'{gene} {target} TOPOTECANHYDROCHLORIDE.'
    sentencesTOPOTECANHYDROCHLORIDE.append(sentenceTOPOTECANHYDROCHLORIDE)

# read DPI file and convert to sentences\
TRETINOIN=pd.read_csv('*path/DATA/Drugs/ABT-888.csv')
sentencesTRETINOIN = []
for _, row in TRETINOIN.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceTRETINOIN = f'{gene} {target} TRETINOIN.'
    sentencesTRETINOIN.append(sentenceTRETINOIN)

# read DPI file and convert to sentences\
VEMURAFENIB=pd.read_csv('*path/DATA/Drugs/VEMURAFENIB.csv')
sentencesVEMURAFENIB = []
for _, row in VEMURAFENIB.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceVEMURAFENIB = f'{gene} {target} VEMURAFENIB.'
    sentencesVEMURAFENIB.append(sentenceVEMURAFENIB)

# read DPI file and convert to sentences\
FLUORODEOXYURIDINE=pd.read_csv('*path/DATA/Drugs/FLUORODEOXYURIDINE.csv')
sentencesFLUORODEOXYURIDINE = []
for _, row in FLUORODEOXYURIDINE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceFLUORODEOXYURIDINE = f'{gene} {target} 5-FLUORO-2-DEOXYURIDINE.'
    sentencesFLUORODEOXYURIDINE.append(sentenceFLUORODEOXYURIDINE)

# read DPI file and convert to sentences\
ALTRETAMINE=pd.read_csv('*path/DATA/Drugs/ALTRETAMINE.csv')
sentencesALTRETAMINE = []
for _, row in ALTRETAMINE.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceALTRETAMINE = f'{gene} {target} ALTRETAMINE.'
    sentencesALTRETAMINE.append(sentenceALTRETAMINE)

# read DPI file and convert to sentences\
ZOLINZA=pd.read_csv('*path/DATA/Drugs/ZOLINZA.csv')
sentencesZOLINZA = []
for _, row in ZOLINZA.iterrows():
    gene = row['Gene(s)']
    target = row['Target']
    sentenceZOLINZA = f'{gene} {target} ZOLINZA.'
    sentencesZOLINZA.append(sentenceZOLINZA)

# PPI from STRING file and convert to sentences\
PPI_drug=PPI_drug.iloc[:,0:2]
sentencesPPI = []
for _, row in PPI_drug.iterrows():
    protein1 = row['#node1']
    protein2 = row['node2']
    sentencePPI = f'{protein1} interacts {protein2}.'
    sentencesPPI.append(sentencePPI)

# add 10 top essential genes for each cell line
sentencescell = []
for index, row in topgeneforcelllines.iterrows():
    cell_line = row['cell line name']
    for gene in row[1:]:
        if isinstance(gene, str):
            sentence = f"{gene} associates {cell_line}."
            sentencescell.append(sentence)

# read PPI from STRING file and convert to sentences\

PPI_cellline=PPI_cellline.iloc[:,0:2]
sentencesPPICELLLINE = []
for _, row in PPI_cellline.iterrows():
    protein1 = row['#node1']
    protein2 = row['node2']
    sentencePPICELLLINE = f'{protein1} interacts {protein2}.'
    sentencesPPICELLLINE.append(sentencePPICELLLINE)

#create merged_list includes all of sentences
merged_list = []
merged_list.extend(sentencesfu)
merged_list.extend(sentencesABT)
merged_list.extend(sentencesALLOPURINOL)
merged_list.extend(sentencesAMIFOSTINE)
merged_list.extend(sentencesANASTROZOLE)
merged_list.extend(sentencesAXITINIB)
merged_list.extend(sentencesAZD1775)
merged_list.extend(sentencesBEZ)
merged_list.extend(sentencesBORTEZOMIB)
merged_list.extend(sentencesBUSULFAN)
merged_list.extend(sentencesCELECOXIB)
merged_list.extend(sentencesCHEMBL277800)
merged_list.extend(sentencesCHLORAMBUCIL)
merged_list.extend(sentencesCRIZOTINIB)
merged_list.extend(sentencesDASATINIB)
merged_list.extend(sentencesDEXAMETHASONE)
merged_list.extend(sentencesDEXRAZOXANE)
merged_list.extend(sentencesERLOTINIBHYDROCHLORIDE)
merged_list.extend(sentencesDINACICLIB)
merged_list.extend(sentencesETOPOSIDE)
merged_list.extend(sentencesEXEMESTANE)
merged_list.extend(sentencesGEFITINIB)
merged_list.extend(sentencesGELDANAMYCIN)
merged_list.extend(sentencesIFOSFAMIDE)
merged_list.extend(sentencesIMIQUIMOD)
merged_list.extend(sentencesLAPATINIB)
merged_list.extend(sentencesLENALIDOMIDE)
merged_list.extend(sentencesLETROZOLE)
merged_list.extend(sentencesMEGESTROLACETATE)
merged_list.extend(sentencesMETFORMIN)
merged_list.extend(sentencesMETHOXSALEN)
merged_list.extend(sentencesMITOTANE)
merged_list.extend(sentencesMK2206)
merged_list.extend(sentencesMK5108)
merged_list.extend(sentencesNILOTINIB)
merged_list.extend(sentencesPAZOPANIBHYDROCHLORIDE)
merged_list.extend(sentencesPROCARBAZINEHYDROCHLORIDE)
merged_list.extend(sentencesPD325901)
merged_list.extend(sentencesPROCARBAZINE)
merged_list.extend(sentencesRUXOLITINIB)
merged_list.extend(sentencesTEMOZOLOMIDE)
merged_list.extend(sentencesTHALIDOMIDE)
merged_list.extend(sentencesTHIOTEPA)
merged_list.extend(sentencesTOPOTECANHYDROCHLORIDE)
merged_list.extend(sentencesTRETINOIN)
merged_list.extend(sentencesVEMURAFENIB)
merged_list.extend(sentencesFLUORODEOXYURIDINE)
merged_list.extend(sentencesZOLINZA)
merged_list.extend(sentencesALTRETAMINE)
merged_list.extend(sentencesPPI)
merged_list.extend(sentencescell)
merged_list.extend(sentencesPPICELLLINE)
merged_list.extend(sentencesdrugcell)
merged_list.extend(sentences_positivecorrelated )
merged_list.extend(sentences_negativecorrelated )
merged_list.extend(sentences_uncorrelated )
merged_list.extend(sentences_similar)
merged_list.extend(sentences_dissimilar)
merged_list=list(set(merged_list))

#construct Knowledge Graph
# Ensure the necessary NLTK data is downloaded
nltk.download('punkt')

# Set random seed for reproducibility
seed = 3
np.random.seed(seed)
gensim.utils.random.seed(seed)
data=[]
sets=merged_list
for s in sets:
  for i in sent_tokenize(s):
      temp = []
      # tokenize the sentence into words
      for j in word_tokenize(i):
          temp.append(j.lower())
      data.append(temp)
model1 = gensim.models.Word2Vec(min_count = 1, alpha=0.001, vector_size =128, window = 3, epochs=100,sg=0,seed=seed)
model1.build_vocab(data, progress_per=1000)
model1.train(data, total_examples=model1.corpus_count, epochs=500, report_delay=1)
model1.init_sims(replace=True)

cell_line_name_lower=[s.lower() for s in cellline_CCLE_EXP.index]
# create a list of vectors, one for each cell_line name
cell_vectors = [model1.wv[d] for d in cell_line_name_lower]

# create a list of column labels for the vector dimensions
column_labels = [f"WVcell{i+1}" for i in range(model1.vector_size)]

# create a Pandas DataFrame where each row is a drug name and its corresponding vector
KG_cell_line_feature = pd.DataFrame(cell_vectors, index=cellline_CCLE_EXP.index, columns=column_labels)

drugnames_lower=[s.lower() for s in druginfo['drug_name']]
# create a list of vectors, one for each drug name
drug_vectors = [model1.wv[d] for d in drugnames_lower]

# create a list of column labels for the vector dimensions
column_labels = [f"WV{i+1}" for i in range(model1.vector_size)]

# create a Pandas DataFrame where each row is a drug name and its corresponding vector
KG_drug_feature = pd.DataFrame(drug_vectors, index=druginfo['drug_name'], columns=column_labels)

#save KnowledgeGraph representation of drugs and cell lines
KG_cell_line_feature.to_excel('*path/DATA/KG_cell_line_feature.xlsx',index=True)
KG_drug_feature.to_excel('*/path/DATA/KG_drug_feature.xlsx',index=True)